<class
    name = "tpq_client"
    title = "TP Query Client"
    script = "zproto_client_c" 
    protocol_class = "tpq_codec"
    package_dir = "../include"
    project_header = "tpquery_classes.hpp"
    header_ext = "hpp"
    source_ext = "cpp"
    >
  This is a TP query client.

  <include filename = "../license.xml" />

  <state name = "start">
    <event name = "say hello" next = "expect coverage">
      <action name = "set nickname" />
      <action name = "use connect timeout" />
      <action name = "connect to server" />
      <action name = "send" message = "HELLO" />
    </event>
  </state>

  <state name = "expect coverage" inherit = "defaults">
    <event name = "COVERAGE" next = "connected">
      <action name = "signal connected" />
      <action name = "client is connected" />
    </event>
  </state>

  <state name = "connected" inherit = "defaults">

    <event name = "query">
      <action name = "set query" />
      <action name = "send" message = "QUERY" />
    </event>

    <event name = "RESULT" >
      <action name = "signal result" />
    </event>

  </state>

  <state name = "defaults">
    <event name = "destructor">
      <action name = "send" message = "GOODBYE" />
    </event>
    <event name = "GOODBYE OK">
      <action name = "signal success" />
      <action name = "terminate" />
    </event>
    <event name = "expired">
      <action name = "check if connection is dead" />
      <action name = "send" message = "PING" />
    </event>
    <event name = "PONG">
      <action name = "client is connected" />
    </event>
    <event name = "ERROR" next = "have error" >
      <action name = "check status code" />
    </event>
    <event name = "exception">
      <!-- Generic exception event to interrupt actions -->
    </event>
    <event name = "*">
      <action name = "signal internal error" />
      <action name = "terminate" />
    </event>
  </state>

  <state name = "have error">
    <event name = "command invalid" next = "reconnecting">
      <action name = "use connect timeout" />
      <action name = "send" message = "HELLO" />
    </event>
    <event name = "other">
      <action name = "signal unhandled error" />
      <action name = "terminate" />
    </event>
  </state>

  <state name = "reconnecting" inherit = "defaults">
    <event name = "HELLO OK" next = "connected">
      <action name = "client is connected" />
    </event>
  </state>

  <!-- API methods.  Their names MUST match an event name. -->

  <method name = "say hello" return = "status">
    Connect to and say hello to server at endpoint, providing our nickname.
    <field name = "nickname" type = "string" />
    <accept reply = "CONNECTED" />
    <accept reply = "FAILURE" />
  </method>

  <method name = "query" return = "status">
    Request TPs.
    <field name = "tstart" type = "number" size = "8">
      A tstart value.
    </field>
    <field name = "tspan" type = "number" size = "8">
      A tspan value.
    </field>
    <field name = "detmask" type = "number" size = "8">
      Detector ID mask
    </field>
    <accept reply = "RESULT"/>
    <accept reply = "FAILURE"/>
  </method>

  <reply name = "RESULT">
    <field name = "seqno"  type = "number" size = "4">Query sequence number</field>
    <field name = "status" type = "number" size = "2">Status code</field>
    <field name = "payload" type= "msg">Payload as msg of per-TPSet frames"</field>
  </reply>

  <reply name = "SUCCESS">
    <field name = "status" type = "integer" />
  </reply>

  <reply name = "FAILURE">
    <field name = "status" type = "integer" />
    <field name = "reason" type = "string" />
  </reply>

</class>
