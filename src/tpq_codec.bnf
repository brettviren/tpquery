The following ABNF grammar defines the Trigger Primitive Queue Codec:

    tpq     = hello *( one | many | block ) [ goodbye ]
    hello   = C:HELLO  ( S:HELLO-OK / S:INVALID / S:FAILED )
    one     = C:ONE    ( S:TPSETS   / S:INVALID / S:FAILED )
    many    = C:MANY   ( S:TPSETS   / S:INVALID / S:FAILED )
    block   = C:BLOCK  ( S:TPSETS   / S:INVALID / S:FAILED )
    heartbeat = C:PING S:PONG
    goodbye = C:GOODBYE ( S:GOODBYE-OK / S:INVALID / S:FAILED )

    ;  Greet a server.

    HELLO           = signature %d1 nickname
    signature       = %xAA %xA0             ; two octets
    nickname        = string                ; Client nickname

    ;  Server return greeting.

    HELLO-OK        = signature %d2 nickname
    nickname        = string                ; Client nickname

    ;  Request based on one detid and one tstart.

    ONE             = signature %d3 detid tstart
    detid           = number-4              ; A detid mask, matched via logical AND.
    tstart          = number-8              ; A tstart value matched via binning.

    ;  Request based on multiple detids and tstarts.

    MANY            = signature %d4 detids tstarts
    detids          = chunk                 ; An array of 4 byte integers giving detids to match via logical AND.
    tstarts         = chunk                 ; An array of 8 byte integers giving tstarts to match via binned.

    ;  Request a block of TPSets based on one detid, one tstart and a tspan.

    BLOCK           = signature %d5 detid tstart tspan
    detid           = number-4              ; A detid mask, matched via logical AND.
    tstart          = number-8              ; A tstart value matched via binning.
    tspan           = number-8              ; A tspan value matched via binning.

    ;  No description

    PING            = signature %d6

    ;  No description

    PONG            = signature %d7

    ;  No description

    GOODBYE         = signature %d8

    ;  No description

    GOODBYE-OK      = signature %d9

    ;  Command failed for some specific reason

    ERROR           = signature %d10 status reason
    status          = number-2              ; 3-digit status code
    reason          = string                ; Printable explanation

    ; A chunk has 4-octet length + binary contents
    chunk           = number-4 *OCTET

    ; Strings are always length + text contents
    string          = number-1 *VCHAR

    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-2        = 2OCTET
    number-4        = 4OCTET
    number-8        = 8OCTET
